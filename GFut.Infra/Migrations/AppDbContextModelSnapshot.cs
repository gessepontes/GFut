// <auto-generated />
using System;
using GFut.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GFut.Infra.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GFut.Domain.Models.Championship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("AmountTeam");

                    b.Property<int>("ChampionshipType");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("GoBack");

                    b.Property<int>("IdField");

                    b.Property<int>("IdPerson");

                    b.Property<string>("Name");

                    b.Property<string>("Picture");

                    b.Property<int>("RefereeType");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<bool>("ReleaseSubscription");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("IdField");

                    b.ToTable("Championship");
                });

            modelBuilder.Entity("GFut.Domain.Models.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address");

                    b.Property<string>("Fone");

                    b.Property<int>("IdCity");

                    b.Property<int>("IdPerson");

                    b.Property<decimal>("MonthlyValue");

                    b.Property<string>("Name");

                    b.Property<string>("Picture");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<bool>("Scheduled");

                    b.Property<decimal>("Value");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson");

                    b.ToTable("Field");
                });

            modelBuilder.Entity("GFut.Domain.Models.FieldItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("IdField");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegisterDate");

                    b.HasKey("Id");

                    b.HasIndex("IdField");

                    b.ToTable("FieldItem");
                });

            modelBuilder.Entity("GFut.Domain.Models.Horary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("DayWeek");

                    b.Property<string>("Description");

                    b.Property<int>("IdFieldItem");

                    b.Property<DateTime>("RegisterDate");

                    b.HasKey("Id");

                    b.HasIndex("IdFieldItem");

                    b.ToTable("Horary");
                });

            modelBuilder.Entity("GFut.Domain.Models.HoraryExtra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<int>("IdFieldItem");

                    b.Property<DateTime>("RegisterDate");

                    b.HasKey("Id");

                    b.HasIndex("IdFieldItem");

                    b.ToTable("HoraryExtra");
                });

            modelBuilder.Entity("GFut.Domain.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("BirthDate");

                    b.Property<bool>("Confirmation");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnName("Cpf");

                    b.Property<string>("Email");

                    b.Property<string>("Fone");

                    b.Property<string>("IdPush");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name");

                    b.Property<string>("Password");

                    b.Property<string>("Picture");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("Rg");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("Status");

                    b.Property<string>("Token");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("GFut.Domain.Models.PersonProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("IdPerson");

                    b.Property<int>("ProfileType");

                    b.Property<DateTime>("RegisterDate");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson");

                    b.ToTable("PersonProfile");
                });

            modelBuilder.Entity("GFut.Domain.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("BirthDate");

                    b.Property<DateTime>("DispenseDate");

                    b.Property<bool>("Dispensed");

                    b.Property<string>("Fone");

                    b.Property<int>("IdTeam");

                    b.Property<string>("Name");

                    b.Property<string>("Picture");

                    b.Property<int>("Position");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("Rg");

                    b.HasKey("Id");

                    b.HasIndex("IdTeam");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("GFut.Domain.Models.Registered", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("IdChampionship");

                    b.Property<int>("IdTeam");

                    b.Property<DateTime>("RegisterDate");

                    b.HasKey("Id");

                    b.HasIndex("IdChampionship");

                    b.HasIndex("IdTeam");

                    b.ToTable("Registered");
                });

            modelBuilder.Entity("GFut.Domain.Models.Scheduling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime?>("CancelDate");

                    b.Property<string>("CustomerNotRegistered");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Fone");

                    b.Property<int>("HoraryType");

                    b.Property<int>("IDHORARIO");

                    b.Property<int?>("IdPerson");

                    b.Property<int?>("IdPersonCancel");

                    b.Property<bool>("MarkedApp");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<int>("SchedulingType");

                    b.Property<string>("State");

                    b.HasKey("Id");

                    b.ToTable("HORARIOAGENDADO");
                });

            modelBuilder.Entity("GFut.Domain.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("DATAFUNDACAO");

                    b.Property<int>("IdPerson");

                    b.Property<string>("Name");

                    b.Property<string>("Observation");

                    b.Property<string>("Picture");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<bool>("State");

                    b.Property<string>("Symbol");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("GFut.Domain.Models.Championship", b =>
                {
                    b.HasOne("GFut.Domain.Models.Field", "Field")
                        .WithMany("Championship")
                        .HasForeignKey("IdField")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GFut.Domain.Models.Field", b =>
                {
                    b.HasOne("GFut.Domain.Models.Person", "Person")
                        .WithMany("Field")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GFut.Domain.Models.FieldItem", b =>
                {
                    b.HasOne("GFut.Domain.Models.Field", "Field")
                        .WithMany("FieldItens")
                        .HasForeignKey("IdField")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GFut.Domain.Models.Horary", b =>
                {
                    b.HasOne("GFut.Domain.Models.FieldItem", "FieldItem")
                        .WithMany("Horarys")
                        .HasForeignKey("IdFieldItem")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GFut.Domain.Models.HoraryExtra", b =>
                {
                    b.HasOne("GFut.Domain.Models.FieldItem", "FieldItem")
                        .WithMany("HoraryExtras")
                        .HasForeignKey("IdFieldItem")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GFut.Domain.Models.PersonProfile", b =>
                {
                    b.HasOne("GFut.Domain.Models.Person", "Person")
                        .WithMany("PersonProfiles")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GFut.Domain.Models.Player", b =>
                {
                    b.HasOne("GFut.Domain.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("IdTeam")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GFut.Domain.Models.Registered", b =>
                {
                    b.HasOne("GFut.Domain.Models.Championship", "Championship")
                        .WithMany("Subscribed")
                        .HasForeignKey("IdChampionship")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GFut.Domain.Models.Team", "Team")
                        .WithMany("Inscriptions")
                        .HasForeignKey("IdTeam")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GFut.Domain.Models.Team", b =>
                {
                    b.HasOne("GFut.Domain.Models.Person", "Person")
                        .WithMany("Teams")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
