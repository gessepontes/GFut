// <auto-generated />
using System;
using GFut.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GFut.Infra.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GFut.Domain.Models.Championship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("AmountTeam")
                        .HasColumnName("AmountTeam");

                    b.Property<int>("ChampionshipType")
                        .HasColumnName("ChampionshipType");

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("EndDate");

                    b.Property<bool>("GoBack")
                        .HasColumnName("GoBack");

                    b.Property<int>("IdField")
                        .HasColumnName("IdField");

                    b.Property<int>("IdPerson")
                        .HasColumnName("IdPerson");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnName("Picture");

                    b.Property<int>("RefereeType")
                        .HasColumnName("RefereeType");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<bool>("ReleaseSubscription")
                        .HasColumnName("ReleaseSubscription");

                    b.Property<DateTime>("StartDate")
                        .HasColumnName("StartDate");

                    b.Property<int>("Type")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("IdField");

                    b.ToTable("Championship");
                });

            modelBuilder.Entity("GFut.Domain.Models.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnName("Address");

                    b.Property<string>("Fone")
                        .IsRequired()
                        .HasColumnName("Fone");

                    b.Property<int>("IdCity")
                        .HasColumnName("IdCity");

                    b.Property<int>("IdPerson")
                        .HasColumnName("IdPerson");

                    b.Property<decimal>("MonthlyValue")
                        .HasColumnName("MonthlyValue");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnName("Picture");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<bool>("Scheduled")
                        .HasColumnName("Scheduled");

                    b.Property<decimal>("Value")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson");

                    b.ToTable("Field");
                });

            modelBuilder.Entity("GFut.Domain.Models.FieldItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("IdField")
                        .HasColumnName("IdField");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name");

                    b.Property<DateTime>("RegisterDate");

                    b.HasKey("Id");

                    b.HasIndex("IdField");

                    b.ToTable("FieldItem");
                });

            modelBuilder.Entity("GFut.Domain.Models.Horary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("DayWeek")
                        .HasColumnName("DayWeek");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description");

                    b.Property<int>("IdFieldItem")
                        .HasColumnName("IdFieldItem");

                    b.Property<DateTime>("RegisterDate");

                    b.HasKey("Id");

                    b.HasIndex("IdFieldItem");

                    b.ToTable("Horary");
                });

            modelBuilder.Entity("GFut.Domain.Models.HoraryExtra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("Date")
                        .HasColumnName("Date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description");

                    b.Property<int>("IdFieldItem")
                        .HasColumnName("IdFieldItem");

                    b.Property<DateTime>("RegisterDate");

                    b.HasKey("Id");

                    b.HasIndex("IdFieldItem");

                    b.ToTable("HoraryExtra");
                });

            modelBuilder.Entity("GFut.Domain.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("BirthDate");

                    b.Property<bool>("Confirmation")
                        .HasColumnName("Confirmation");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnName("Cpf");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email");

                    b.Property<string>("Fone")
                        .IsRequired()
                        .HasColumnName("Fone");

                    b.Property<string>("IdPush")
                        .IsRequired()
                        .HasColumnName("IdPush");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("Password");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnName("Picture");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("Rg");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnName("SecurityStamp");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnName("Token");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("GFut.Domain.Models.PersonProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("IdPerson")
                        .HasColumnName("IdPerson");

                    b.Property<int>("ProfileType")
                        .HasColumnName("ProfileType");

                    b.Property<DateTime>("RegisterDate");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson");

                    b.ToTable("PersonProfile");
                });

            modelBuilder.Entity("GFut.Domain.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("BirthDate");

                    b.Property<DateTime>("DispenseDate")
                        .HasColumnName("DispenseDate");

                    b.Property<bool>("Dispensed")
                        .HasColumnName("Dispensed");

                    b.Property<string>("Fone")
                        .IsRequired()
                        .HasColumnName("Fone");

                    b.Property<int>("IdTeam")
                        .HasColumnName("IdTeam");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnName("Picture");

                    b.Property<int>("Position")
                        .HasColumnName("Position");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasColumnName("Rg");

                    b.HasKey("Id");

                    b.HasIndex("IdTeam");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("GFut.Domain.Models.Scheduling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime?>("CancelDate")
                        .IsRequired()
                        .HasColumnName("CancelDate");

                    b.Property<string>("CustomerNotRegistered")
                        .IsRequired()
                        .HasColumnName("CustomerNotRegistered");

                    b.Property<DateTime>("Date")
                        .HasColumnName("Date");

                    b.Property<string>("Fone")
                        .IsRequired()
                        .HasColumnName("Fone");

                    b.Property<int>("HoraryType")
                        .HasColumnName("HoraryType");

                    b.Property<int>("IdHorary")
                        .HasColumnName("IdHorary");

                    b.Property<int?>("IdPerson")
                        .HasColumnName("IdPerson");

                    b.Property<int?>("IdPersonCancel")
                        .HasColumnName("IdPersonCancel");

                    b.Property<bool>("MarkedApp")
                        .HasColumnName("MarkedApp");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<int>("SchedulingType")
                        .HasColumnName("SchedulingType");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnName("State");

                    b.HasKey("Id");

                    b.ToTable("Scheduling");
                });

            modelBuilder.Entity("GFut.Domain.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<DateTime>("FundationDate")
                        .HasColumnName("FundationDate");

                    b.Property<int>("IdPerson")
                        .HasColumnName("IdPerson");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnName("Observation");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnName("Picture");

                    b.Property<DateTime>("RegisterDate");

                    b.Property<bool>("State")
                        .HasColumnName("State");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnName("Symbol");

                    b.Property<int>("Type")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("GFut.Domain.Models.Championship", b =>
                {
                    b.HasOne("GFut.Domain.Models.Field", "Field")
                        .WithMany("Championship")
                        .HasForeignKey("IdField")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GFut.Domain.Models.Field", b =>
                {
                    b.HasOne("GFut.Domain.Models.Person", "Person")
                        .WithMany("Field")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GFut.Domain.Models.FieldItem", b =>
                {
                    b.HasOne("GFut.Domain.Models.Field", "Field")
                        .WithMany("FieldItens")
                        .HasForeignKey("IdField")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GFut.Domain.Models.Horary", b =>
                {
                    b.HasOne("GFut.Domain.Models.FieldItem", "FieldItem")
                        .WithMany("Horarys")
                        .HasForeignKey("IdFieldItem")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GFut.Domain.Models.HoraryExtra", b =>
                {
                    b.HasOne("GFut.Domain.Models.FieldItem", "FieldItem")
                        .WithMany("HoraryExtras")
                        .HasForeignKey("IdFieldItem")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GFut.Domain.Models.PersonProfile", b =>
                {
                    b.HasOne("GFut.Domain.Models.Person", "Person")
                        .WithMany("PersonProfiles")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GFut.Domain.Models.Player", b =>
                {
                    b.HasOne("GFut.Domain.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("IdTeam")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GFut.Domain.Models.Team", b =>
                {
                    b.HasOne("GFut.Domain.Models.Person", "Person")
                        .WithMany("Teams")
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
