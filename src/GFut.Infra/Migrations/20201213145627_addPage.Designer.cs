// <auto-generated />
using System;
using GFut.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GFut.Infra.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20201213145627_addPage")]
    partial class addPage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("GFut.Domain.Models.Championship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("AmountTeam")
                        .HasColumnType("int")
                        .HasColumnName("AmountTeam");

                    b.Property<int>("ChampionshipType")
                        .HasColumnType("int")
                        .HasColumnName("ChampionshipType");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("EndDate");

                    b.Property<int>("FieldId")
                        .HasColumnType("int")
                        .HasColumnName("FieldId");

                    b.Property<bool>("GoBack")
                        .HasColumnType("bit")
                        .HasColumnName("GoBack");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Name");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonId");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Picture");

                    b.Property<bool>("PlayerRegistration")
                        .HasColumnType("bit");

                    b.Property<int>("RefereeType")
                        .HasColumnType("int")
                        .HasColumnName("RefereeType");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ReleaseSubscription")
                        .HasColumnType("bit")
                        .HasColumnName("ReleaseSubscription");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("StartDate");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("PersonId");

                    b.ToTable("Championship");
                });

            modelBuilder.Entity("GFut.Domain.Models.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Address");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityId");

                    b.Property<decimal>("MonthlyValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("MonthlyValue");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonId");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Phone");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Picture");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("date")
                        .HasColumnName("RegisterDate");

                    b.Property<bool>("Scheduled")
                        .HasColumnType("bit")
                        .HasColumnName("Scheduled");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("Value");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Field");
                });

            modelBuilder.Entity("GFut.Domain.Models.FieldItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<int>("FieldId")
                        .HasColumnType("int")
                        .HasColumnName("FieldId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Name");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("date")
                        .HasColumnName("RegisterDate");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.ToTable("FieldItem");
                });

            modelBuilder.Entity("GFut.Domain.Models.GroupChampionship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("GroupChampionships");
                });

            modelBuilder.Entity("GFut.Domain.Models.Horary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("DayWeek")
                        .HasColumnType("int")
                        .HasColumnName("DayWeek");

                    b.Property<int>("FieldItemId")
                        .HasColumnType("int")
                        .HasColumnName("FieldItemId");

                    b.Property<string>("Hour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Hour");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("State")
                        .HasColumnType("bit")
                        .HasColumnName("State");

                    b.HasKey("Id");

                    b.HasIndex("FieldItemId");

                    b.ToTable("Horary");
                });

            modelBuilder.Entity("GFut.Domain.Models.HoraryExtra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Date");

                    b.Property<int>("FieldItemId")
                        .HasColumnType("int")
                        .HasColumnName("FieldItemId");

                    b.Property<string>("Hour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Hour");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FieldItemId");

                    b.ToTable("HoraryExtra");
                });

            modelBuilder.Entity("GFut.Domain.Models.HoraryPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FieldItemId")
                        .HasColumnType("int")
                        .HasColumnName("FieldItemId");

                    b.Property<decimal>("MonthlyValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FieldItemId");

                    b.ToTable("HoraryPrice");
                });

            modelBuilder.Entity("GFut.Domain.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<int>("FieldId")
                        .HasColumnType("int")
                        .HasColumnName("FieldId");

                    b.Property<int>("GuestPoints")
                        .HasColumnType("int")
                        .HasColumnName("GuestPoints");

                    b.Property<int>("GuestTeamId")
                        .HasColumnType("int")
                        .HasColumnName("GuestTeamId");

                    b.Property<int>("HomePoints")
                        .HasColumnType("int")
                        .HasColumnName("HomePoints");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int")
                        .HasColumnName("HomeTeamId");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("date")
                        .HasColumnName("MatchDate");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("date")
                        .HasColumnName("RegisterDate");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("StartTime");

                    b.Property<string>("TeamNotRegistered")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TeamNotRegistered");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("GuestTeamId");

                    b.HasIndex("HomeTeamId");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("GFut.Domain.Models.MatchChampionship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<bool>("Calculate")
                        .HasColumnType("bit")
                        .HasColumnName("Calculate");

                    b.Property<int>("FieldItemId")
                        .HasColumnType("int")
                        .HasColumnName("FieldItemId");

                    b.Property<int>("GuestPoints")
                        .HasColumnType("int")
                        .HasColumnName("GuestPoints");

                    b.Property<int>("GuestSubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("GuestSubscriptionId");

                    b.Property<int>("HomePoints")
                        .HasColumnType("int")
                        .HasColumnName("HomePoints");

                    b.Property<int>("HomeSubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("HomeSubscriptionId");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("date")
                        .HasColumnName("MatchDate");

                    b.Property<string>("Observation")
                        .HasColumnType("varchar(300)")
                        .HasColumnName("Observation");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("date")
                        .HasColumnName("RegisterDate");

                    b.Property<int>("Round")
                        .HasColumnType("int")
                        .HasColumnName("Round");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("FieldItemId");

                    b.HasIndex("GuestSubscriptionId");

                    b.HasIndex("HomeSubscriptionId");

                    b.ToTable("MatchChampionship");
                });

            modelBuilder.Entity("GFut.Domain.Models.MatchPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<int>("Assistance")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int")
                        .HasColumnName("MatchId");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("Number");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("date")
                        .HasColumnName("RegisterDate");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.ToTable("MatchPlayer");
                });

            modelBuilder.Entity("GFut.Domain.Models.MatchPlayerChampionship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<int>("Card")
                        .HasColumnType("int")
                        .HasColumnName("Card");

                    b.Property<int>("MatchChampionshipId")
                        .HasColumnType("int")
                        .HasColumnName("MatchChampionshipId");

                    b.Property<int>("Number")
                        .HasColumnType("int")
                        .HasColumnName("Number");

                    b.Property<int>("PlayerRegistrationId")
                        .HasColumnType("int")
                        .HasColumnName("PlayerRegistrationId");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasColumnName("Points");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("date")
                        .HasColumnName("RegisterDate");

                    b.HasKey("Id");

                    b.HasIndex("MatchChampionshipId");

                    b.HasIndex("PlayerRegistrationId");

                    b.ToTable("MatchPlayerChampionship");
                });

            modelBuilder.Entity("GFut.Domain.Models.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Href")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Href");

                    b.Property<string>("Icon")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Icon");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentId");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Page");
                });

            modelBuilder.Entity("GFut.Domain.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("BirthDate");

                    b.Property<bool>("Confirmation")
                        .HasColumnType("bit")
                        .HasColumnName("Confirmation");

                    b.Property<string>("Cpf")
                        .HasColumnType("varchar(11)")
                        .HasColumnName("Cpf");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Email");

                    b.Property<string>("IdPush")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("IdPush");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Password");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Phone");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Picture");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("date")
                        .HasColumnName("RegisterDate");

                    b.Property<string>("Rg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("SecurityStamp");

                    b.Property<string>("Token")
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Token");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("GFut.Domain.Models.PersonProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonId");

                    b.Property<int>("ProfileType")
                        .HasColumnType("int")
                        .HasColumnName("ProfileType");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonProfile");
                });

            modelBuilder.Entity("GFut.Domain.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("BirthDate");

                    b.Property<DateTime>("DispenseDate")
                        .HasColumnType("date")
                        .HasColumnName("DispenseDate");

                    b.Property<bool>("Dispensed")
                        .HasColumnType("bit")
                        .HasColumnName("Dispensed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Name");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Phone");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Picture");

                    b.Property<int>("Position")
                        .HasColumnType("int")
                        .HasColumnName("Position");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("date")
                        .HasColumnName("RegisterDate");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("GFut.Domain.Models.PlayerRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ApprovedDate");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int")
                        .HasColumnName("PlayerId");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime")
                        .HasColumnName("RegisterDate");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .HasColumnName("State");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionId");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("PlayerRegistration");
                });

            modelBuilder.Entity("GFut.Domain.Models.Scheduling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime")
                        .HasColumnName("CancelDate");

                    b.Property<string>("CustomerNotRegistered")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("CustomerNotRegistered");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("Date");

                    b.Property<int?>("HoraryExtraId")
                        .HasColumnType("int")
                        .HasColumnName("HoraryExtraId");

                    b.Property<int?>("HoraryId")
                        .HasColumnType("int")
                        .HasColumnName("HoraryId");

                    b.Property<int>("HoraryType")
                        .HasColumnType("int")
                        .HasColumnName("HoraryType");

                    b.Property<bool>("MarkedApp")
                        .HasColumnType("bit")
                        .HasColumnName("MarkedApp");

                    b.Property<int?>("PersonCancelId")
                        .HasColumnType("int")
                        .HasColumnName("PersonCancelId");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonId");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Phone");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("date")
                        .HasColumnName("RegisterDate");

                    b.Property<int>("SchedulingType")
                        .HasColumnType("int")
                        .HasColumnName("SchedulingType");

                    b.Property<int>("State")
                        .HasColumnType("int")
                        .HasColumnName("State");

                    b.HasKey("Id");

                    b.HasIndex("HoraryExtraId");

                    b.HasIndex("HoraryId");

                    b.HasIndex("PersonId");

                    b.ToTable("Scheduling");
                });

            modelBuilder.Entity("GFut.Domain.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<DateTime>("ApprovedDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ApprovedDate");

                    b.Property<int>("ChampionshipId")
                        .HasColumnType("int")
                        .HasColumnName("ChampionshipId");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("date")
                        .HasColumnName("RegisterDate");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("char(1)")
                        .HasColumnName("State");

                    b.Property<int>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("ChampionshipId");

                    b.HasIndex("TeamId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("GFut.Domain.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnName("Active");

                    b.Property<DateTime>("FundationDate")
                        .HasColumnType("date")
                        .HasColumnName("FundationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Name");

                    b.Property<string>("Observation")
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Observation");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("PersonId");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Picture");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("date")
                        .HasColumnName("RegisterDate");

                    b.Property<bool>("State")
                        .HasColumnType("bit")
                        .HasColumnName("State");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Symbol");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("Type");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("GFut.Domain.Models.Championship", b =>
                {
                    b.HasOne("GFut.Domain.Models.Field", "Field")
                        .WithMany("Championship")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GFut.Domain.Models.Person", "Person")
                        .WithMany("Championship")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GFut.Domain.Models.Field", b =>
                {
                    b.HasOne("GFut.Domain.Models.Person", "Person")
                        .WithMany("Field")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GFut.Domain.Models.FieldItem", b =>
                {
                    b.HasOne("GFut.Domain.Models.Field", "Field")
                        .WithMany("FieldItens")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Field");
                });

            modelBuilder.Entity("GFut.Domain.Models.GroupChampionship", b =>
                {
                    b.HasOne("GFut.Domain.Models.Subscription", "Subscription")
                        .WithMany("GroupChampionships")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("GFut.Domain.Models.Horary", b =>
                {
                    b.HasOne("GFut.Domain.Models.FieldItem", "FieldItem")
                        .WithMany("Horarys")
                        .HasForeignKey("FieldItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FieldItem");
                });

            modelBuilder.Entity("GFut.Domain.Models.HoraryExtra", b =>
                {
                    b.HasOne("GFut.Domain.Models.FieldItem", "FieldItem")
                        .WithMany("HoraryExtras")
                        .HasForeignKey("FieldItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FieldItem");
                });

            modelBuilder.Entity("GFut.Domain.Models.HoraryPrice", b =>
                {
                    b.HasOne("GFut.Domain.Models.FieldItem", "FieldItem")
                        .WithMany("HoraryPrices")
                        .HasForeignKey("FieldItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FieldItem");
                });

            modelBuilder.Entity("GFut.Domain.Models.Match", b =>
                {
                    b.HasOne("GFut.Domain.Models.Field", "Field")
                        .WithMany("Matches")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GFut.Domain.Models.Team", "GuestTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("GuestTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GFut.Domain.Models.Team", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("GuestTeam");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("GFut.Domain.Models.MatchChampionship", b =>
                {
                    b.HasOne("GFut.Domain.Models.FieldItem", "FieldItem")
                        .WithMany("MatchChampionships")
                        .HasForeignKey("FieldItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GFut.Domain.Models.Subscription", "GuestSubscription")
                        .WithMany("AwayChampionshipMatches")
                        .HasForeignKey("GuestSubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GFut.Domain.Models.Subscription", "HomeSubscription")
                        .WithMany("HomeChampionshipMatches")
                        .HasForeignKey("HomeSubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FieldItem");

                    b.Navigation("GuestSubscription");

                    b.Navigation("HomeSubscription");
                });

            modelBuilder.Entity("GFut.Domain.Models.MatchPlayer", b =>
                {
                    b.HasOne("GFut.Domain.Models.Match", "Match")
                        .WithMany("MatchPlayer")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("GFut.Domain.Models.MatchPlayerChampionship", b =>
                {
                    b.HasOne("GFut.Domain.Models.MatchChampionship", "MatchChampionship")
                        .WithMany("MatchPlayerChampionships")
                        .HasForeignKey("MatchChampionshipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GFut.Domain.Models.PlayerRegistration", "PlayerRegistration")
                        .WithMany("MatchPlayerChampionships")
                        .HasForeignKey("PlayerRegistrationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MatchChampionship");

                    b.Navigation("PlayerRegistration");
                });

            modelBuilder.Entity("GFut.Domain.Models.Page", b =>
                {
                    b.HasOne("GFut.Domain.Models.Page", "PageNavigation")
                        .WithMany("Pages")
                        .HasForeignKey("ParentId");

                    b.Navigation("PageNavigation");
                });

            modelBuilder.Entity("GFut.Domain.Models.PersonProfile", b =>
                {
                    b.HasOne("GFut.Domain.Models.Person", "Person")
                        .WithMany("PersonProfiles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GFut.Domain.Models.Player", b =>
                {
                    b.HasOne("GFut.Domain.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GFut.Domain.Models.PlayerRegistration", b =>
                {
                    b.HasOne("GFut.Domain.Models.Player", "Player")
                        .WithMany("PlayerRegistration")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GFut.Domain.Models.Subscription", "Subscription")
                        .WithMany("PlayerRegistration")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("GFut.Domain.Models.Scheduling", b =>
                {
                    b.HasOne("GFut.Domain.Models.HoraryExtra", "HoraryExtra")
                        .WithMany()
                        .HasForeignKey("HoraryExtraId");

                    b.HasOne("GFut.Domain.Models.Horary", "Horary")
                        .WithMany()
                        .HasForeignKey("HoraryId");

                    b.HasOne("GFut.Domain.Models.Person", "Person")
                        .WithMany("Scheduling")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Horary");

                    b.Navigation("HoraryExtra");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GFut.Domain.Models.Subscription", b =>
                {
                    b.HasOne("GFut.Domain.Models.Championship", "Championship")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ChampionshipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GFut.Domain.Models.Team", "Team")
                        .WithMany("Subscriptions")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Championship");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("GFut.Domain.Models.Team", b =>
                {
                    b.HasOne("GFut.Domain.Models.Person", "Person")
                        .WithMany("Teams")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("GFut.Domain.Models.Championship", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("GFut.Domain.Models.Field", b =>
                {
                    b.Navigation("Championship");

                    b.Navigation("FieldItens");

                    b.Navigation("Matches");
                });

            modelBuilder.Entity("GFut.Domain.Models.FieldItem", b =>
                {
                    b.Navigation("HoraryExtras");

                    b.Navigation("HoraryPrices");

                    b.Navigation("Horarys");

                    b.Navigation("MatchChampionships");
                });

            modelBuilder.Entity("GFut.Domain.Models.Match", b =>
                {
                    b.Navigation("MatchPlayer");
                });

            modelBuilder.Entity("GFut.Domain.Models.MatchChampionship", b =>
                {
                    b.Navigation("MatchPlayerChampionships");
                });

            modelBuilder.Entity("GFut.Domain.Models.Page", b =>
                {
                    b.Navigation("Pages");
                });

            modelBuilder.Entity("GFut.Domain.Models.Person", b =>
                {
                    b.Navigation("Championship");

                    b.Navigation("Field");

                    b.Navigation("PersonProfiles");

                    b.Navigation("Scheduling");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("GFut.Domain.Models.Player", b =>
                {
                    b.Navigation("PlayerRegistration");
                });

            modelBuilder.Entity("GFut.Domain.Models.PlayerRegistration", b =>
                {
                    b.Navigation("MatchPlayerChampionships");
                });

            modelBuilder.Entity("GFut.Domain.Models.Subscription", b =>
                {
                    b.Navigation("AwayChampionshipMatches");

                    b.Navigation("GroupChampionships");

                    b.Navigation("HomeChampionshipMatches");

                    b.Navigation("PlayerRegistration");
                });

            modelBuilder.Entity("GFut.Domain.Models.Team", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("HomeMatches");

                    b.Navigation("Players");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
